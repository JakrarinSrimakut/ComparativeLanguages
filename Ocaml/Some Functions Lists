let rec has_element l e=
match l with
  |[]->false		(*if l is empty return false*)
  |h::t->if e = h then
	  true
	 else
	  has_element(List.tl l) e
;;



let rec duplicate_list_elements ls=
match ls with
| [] -> []
| h::t->h::h::duplicate_list_elements t (*make 2 h's then rec call on the t*)
;;



(*same as above*)

let rec duplicate_list_elements = function
| []->[]
| h::t->h::h::duplicate_list_elements t
;;



(*Reverse List*)

let rec reverse_list ls rls=
match ls with
  |[]->rls
  |h::t->(reverse_list t rls)@[h]
;;


(* @ has a lower priority than function calls:
reverse_list [1;2;3] []
  (reverse_list [2;3] []) @ [1]
    ((reverse_list [3] []) @ [2]) @[1]
      (((reverse list [] []) @ [3]) @ [2]) @[1]
      (([] @ [3]) @ [2]) @[1])
    ([3] @ [2]) @[1]
  [3;2] @ [1]
[3;2;1]
*)



let rec reverse_list ls rls = match ls with
  | [] -> rls
  | h::t -> reverse_list t (h::rls)  (*add h to the front of rls list*)
;;


(* calls:
reverse_list [1;2;3] []
reverse_list [2;3] (1::[])
reverse_list [3] (2::[1])
reverse_list [] (3::[2;1])
[3;2;1]
*)
  
(*tail recursion-send data from prev rec to next. This is more efficient b/c it doesn't go all the way back up again*)

